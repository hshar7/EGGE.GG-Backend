enum TournamentType {
    PRIZE_POOL,
    BUY_IN,
    OFF_CHAIN
}

enum TournamentStatus {
    NEW,
    LIVE,
    FINISHED
}

enum BracketType {
    SINGLE_ELIMINATION,
    BATTLE_ROYALE,
    DOUBLE_ELIMINATION,
    ROUND_ROBIN
}

enum TournamentFormat {
    SINGLES,
    TEAMS
}

type Rounds {
    standings: Object
}

type Tournament {
    id: String!
    tournamentId: Int!
    tournamentType: TournamentType!
    tournamentFormat: TournamentFormat!
    tournamentStatus: TournamentStatus!
    bracketType: BracketType!
    numberOfRounds: Int
    pointsToWin: Int
    pointsDistribution: [Int]
    rounds: [Rounds]
    deadline: Date!
    name: String!
    matches: [Match]
    description: String!
    prize: BigDecimal!
    buyInFee: BigDecimal!
    maxPlayers: Int!
    participants: [User]
    token: Token
    prizeDistribution: [Int]
    owner: User!
    game: Game!
    featured: Boolean!
    coverImage: String!
    createdAt: Date!
    updatedAt: Date!
}

extend type Query {
    tournaments(count: Int, offset: Int): [Tournament]!
    tournament(id: String!): Tournament
    findTournamentsByString(count: Int, offset: Int, fieldName: String, fieldData: String): [Tournament]!
    findTournamentsByBool(count: Int, offset: Int, fieldName: String, fieldData: Boolean): [Tournament]!
}

extend type Mutation {
    addParticipant(tournamentId: String, userId: String): Tournament
    matchWinner(pos: Int, matchId: String): [Match]!
}
